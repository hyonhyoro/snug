#+TITLE:    Emacs Configuration
#+AUTHOR:   Kazuho Sakoda
#+EMAIL:    hyonhyoro.kazuho@gmail.com
#+DATE:     2016-09-21
#+MODIFIED: 2018-05-12
#+STARTUP:  overview


* Configuration
** StartUp
Keep your =~/.emacs.d= clean.

#+begin_src emacs-lisp
(when load-file-name
  (setq user-emacs-directory (file-name-directory load-file-name)))
#+end_src

Read [[https://github.com/lewang/flx#gc-optimization][flx]].

#+begin_src emacs-lisp
(setq gc-cons-threshold 20000000)
#+end_src

Stop annoying things.

#+begin_src emacs-lisp
(when (display-graphic-p)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (tooltip-mode -1))

(setq initial-scratch-message nil
      initial-major-mode #'fundamental-mode
      inhibit-startup-screen t)

(blink-cursor-mode -1)

(defalias #'yes-or-no-p #'y-or-n-p)
#+end_src

Switch some keys by using [[https://ja.osdn.net/projects/yamy/][yamy]] to avoid "Emacs Pinky".

| Before   | After          |
|----------+----------------|
| CapsLock | Ctrl_L         |
| Enter    | Ctrl_R(Enter)  |
| Shift_L  | Alt_L          |
| Shift_R  | Alt_R          |
| Space    | Shift_L(Space) |

#+begin_src emacs-lisp
(keyboard-translate ?\C-h ?\C-?)
(keyboard-translate ?\C-z ?\C-h)
#+end_src
** Package Management
Add emacs-lisp package repositories.

#+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")))
(package-initialize)
#+end_src

Read [[https://github.com/jwiegley/use-package][use-package]].

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'bind-key)
#+end_src
** File Management
*** Cache File
Store all temporary files in =cache= directory.

#+begin_src emacs-lisp
(defconst hyonhyoro|cache-dir
  (expand-file-name "cache/" user-emacs-directory))

(unless (file-exists-p hyonhyoro|cache-dir)
  (make-directory hyonhyoro|cache-dir))
#+end_src

Custom file.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" hyonhyoro|cache-dir))
#+end_src

Backup files.
Create =*~= files in =cache/backup= directory.

#+begin_src emacs-lisp :tangle no
(setq make-backup-files t)
#+end_src

#+begin_src emacs-lisp :tangle no
(setq version-control t)
(setq kept-new-vi 5
      kept-old-versions 0)
(setq backup-by-copying nil)
(setq delete-old-versions t)
#+end_src

#+begin_src emacs-lisp
(let ((backup-dir (expand-file-name "backup/" hyonhyoro|cache-dir)))
  (setq backup-directory-alist `((".*" . ,backup-dir))))
#+end_src

Auto-save files.
Create =#*#= files in =cache/auto-save= directory.

#+begin_src emacs-lisp
(setq auto-save-default t)
(setq delete-auto-save-files t)
(setq auto-save-interval 150
      auto-save-timeout 15)

(let ((auto-save-dir (expand-file-name "auto-save/" hyonhyoro|cache-dir)))
  (setq auto-save-list-file-prefix (format ".saves-%s" auto-save-dir))
  (setq auto-save-file-name-transforms
        `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t)
          (".*" ,auto-save-dir t))))
#+end_src

Lock files.
Stop creating =.#*= files.

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
*** Executable File
Store all executable files in =bin= directory.

#+begin_src emacs-lisp
(defconst hyonhyoro|bin-dir
  (expand-file-name "bin/" user-emacs-directory))

(unless (file-exists-p hyonhyoro|bin-dir)
  (make-directory hyonhyoro|bin-dir))
#+end_src
*** Save
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'time-stamp)
#+end_src

#+begin_src emacs-lisp
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src

#+begin_src emacs-lisp
(setq-default require-final-newline t)
#+end_src
* Footer
# Local Variables:
# coding: utf-8
# indent-tabs-mode: nil
# time-stamp-pattern: "10/MODIFIED:\\\\?[ \t]+%:y-%02m-%02d\\\\?\n"
# End:
