#+TITLE:    Emacs Configuration
#+AUTHOR:   Kazuho Sakoda
#+EMAIL:    hyonhyoro.kazuho@gmail.com
#+DATE:     2016-09-21
#+MODIFIED: 2018-05-15
#+STARTUP:  overview


* Configuration
** Startup
Keep your =~/.emacs.d= clean.

#+begin_src emacs-lisp
(when load-file-name
  (setq user-emacs-directory (file-name-directory load-file-name)))
#+end_src

Read [[https://github.com/lewang/flx#gc-optimization][flx]].

#+begin_src emacs-lisp
(setq gc-cons-threshold 20000000)
#+end_src

Stop annoying things.

#+begin_src emacs-lisp
(when (display-graphic-p)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (tooltip-mode -1))

(setq initial-scratch-message nil
      initial-major-mode #'fundamental-mode
      inhibit-startup-screen t)

(blink-cursor-mode -1)

(defalias #'yes-or-no-p #'y-or-n-p)
#+end_src

Switch some keys by using [[https://ja.osdn.net/projects/yamy/][yamy]] to avoid "Emacs Pinky".

| Before   | After          |
|----------+----------------|
| CapsLock | Ctrl_L         |
| Enter    | Ctrl_R(Enter)  |
| Shift_L  | Alt_L          |
| Shift_R  | Alt_R          |
| Space    | Shift_L(Space) |

#+begin_src emacs-lisp
(keyboard-translate ?\C-h ?\C-?)
(keyboard-translate ?\C-z ?\C-h)
#+end_src
** Package Management
Add emacs-lisp package repositories.

#+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")))
(package-initialize)
#+end_src

Read [[https://github.com/jwiegley/use-package][use-package]].

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'bind-key)
#+end_src
** File Management
*** Cache File
Store all temporary files in =cache= directory.

#+begin_src emacs-lisp
(defconst hyonhyoro|cache-dir
  (expand-file-name "cache/" user-emacs-directory))

(unless (file-exists-p hyonhyoro|cache-dir)
  (make-directory hyonhyoro|cache-dir))
#+end_src

Custom file.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" hyonhyoro|cache-dir))
#+end_src

Backup files. Create =*~= files in =cache/backup= directory.

#+begin_src emacs-lisp :tangle no
(setq make-backup-files t)
#+end_src

#+begin_src emacs-lisp :tangle no
(setq version-control t)
(setq kept-new-vi 5
      kept-old-versions 0)
(setq backup-by-copying nil)
(setq delete-old-versions t)
#+end_src

#+begin_src emacs-lisp
(let ((backup-dir (expand-file-name "backup/" hyonhyoro|cache-dir)))
  (setq backup-directory-alist `((".*" . ,backup-dir))))
#+end_src

Auto-save files. Create =#*#= files in =cache/auto-save= directory.

#+begin_src emacs-lisp
(setq auto-save-default t)
(setq delete-auto-save-files t)
(setq auto-save-interval 150
      auto-save-timeout 15)

(let ((auto-save-dir (expand-file-name "auto-save/" hyonhyoro|cache-dir)))
  (setq auto-save-list-file-prefix (format ".saves-%s" auto-save-dir))
  (setq auto-save-file-name-transforms
        `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t)
          (".*" ,auto-save-dir t))))
#+end_src

Lock files. Stop creating =.#*= files.

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
*** Executable File
Store all executable files in =bin= directory.

#+begin_src emacs-lisp
(defconst hyonhyoro|bin-dir
  (expand-file-name "bin/" user-emacs-directory))

(unless (file-exists-p hyonhyoro|bin-dir)
  (make-directory hyonhyoro|bin-dir))
#+end_src
*** Save
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'time-stamp)
#+end_src

#+begin_src emacs-lisp
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src

#+begin_src emacs-lisp
(setq-default require-final-newline t)
#+end_src
** Locale
#+begin_src emacs-lisp
(set-locale-environment nil)
(set-language-environment "Japanese")

(let ((coding-system 'utf-8))
  (setq locale-coding-system coding-system)
  (prefer-coding-system coding-system)
  (set-file-name-coding-system coding-system)
  (set-keyboard-coding-system coding-system)
  (set-terminal-coding-system coding-system)
  (set-selection-coding-system coding-system))
#+end_src

East Asian ambiguous width.

#+begin_src emacs-lisp
(defun set-east-asian-ambiguous-width (width)
  "Integrate some glyphs' width into WIDTH."
  (while (char-table-parent char-width-table)
    (setq char-width-table (char-table-parent char-width-table)))
  (let ((table (make-char-table nil)))
    (dolist (range
             '(#x00A1 #x00A4 (#x00A7 . #x00A8) #x00AA (#x00AD . #x00AE)
                      (#x00B0 . #x00B4) (#x00B6 . #x00BA) (#x00BC . #x00BF)
                      #x00C6 #x00D0 (#x00D7 . #x00D8) (#x00DE . #x00E1) #x00E6
                      (#x00E8 . #x00EA) (#x00EC . #x00ED) #x00F0
                      (#x00F2 . #x00F3) (#x00F7 . #x00FA) #x00FC #x00FE
                      #x0101 #x0111 #x0113 #x011B (#x0126 . #x0127) #x012B
                      (#x0131 . #x0133) #x0138 (#x013F . #x0142) #x0144
                      (#x0148 . #x014B) #x014D (#x0152 . #x0153)
                      (#x0166 . #x0167) #x016B #x01CE #x01D0 #x01D2 #x01D4
                      #x01D6 #x01D8 #x01DA #x01DC #x0251 #x0261 #x02C4 #x02C7
                      (#x02C9 . #x02CB) #x02CD #x02D0 (#x02D8 . #x02DB) #x02DD
                      #x02DF (#x0300 . #x036F) (#x0391 . #x03A9)
                      (#x03B1 . #x03C1) (#x03C3 . #x03C9) #x0401
                      (#x0410 . #x044F) #x0451 #x2010 (#x2013 . #x2016)
                      (#x2018 . #x2019) (#x201C . #x201D) (#x2020 . #x2022)
                      (#x2024 . #x2027) #x2030 (#x2032 . #x2033) #x2035 #x203B
                      #x203E #x2074 #x207F (#x2081 . #x2084) #x20AC #x2103
                      #x2105 #x2109 #x2113 #x2116 (#x2121 . #x2122) #x2126
                      #x212B (#x2153 . #x2154) (#x215B . #x215E)
                      (#x2160 . #x216B) (#x2170 . #x2179) (#x2190 . #x2199)
                      (#x21B8 . #x21B9) #x21D2 #x21D4 #x21E7 #x2200
                      (#x2202 . #x2203) (#x2207 . #x2208) #x220B #x220F #x2211
                      #x2215 #x221A (#x221D . #x2220) #x2223 #x2225
                      (#x2227 . #x222C) #x222E (#x2234 . #x2237)
                      (#x223C . #x223D) #x2248 #x224C #x2252 (#x2260 . #x2261)
                      (#x2264 . #x2267) (#x226A . #x226B) (#x226E . #x226F)
                      (#x2282 . #x2283) (#x2286 . #x2287) #x2295 #x2299 #x22A5
                      #x22BF #x2312 (#x2460 . #x24E9) (#x24EB . #x254B)
                      (#x2550 . #x2573) (#x2580 . #x258F) (#x2592 . #x2595)
                      (#x25A0 . #x25A1) (#x25A3 . #x25A9) (#x25B2 . #x25B3)
                      (#x25B6 . #x25B7) (#x25BC . #x25BD) (#x25C0 . #x25C1)
                      (#x25C6 . #x25C8) #x25CB (#x25CE . #x25D1)
                      (#x25E2 . #x25E5) #x25EF (#x2605 . #x2606) #x2609
                      (#x260E . #x260F) (#x2614 . #x2615) #x261C #x261E #x2640
                      #x2642 (#x2660 . #x2661) (#x2663 . #x2665)
                      (#x2667 . #x266A) (#x266C . #x266D) #x266F #x273D
                      (#x2776 . #x277F) (#xE000 . #xF8FF) (#xFE00 . #xFE0F)
                      #xFFFD))
      (set-char-table-range table range width))
    (optimize-char-table table)
    (set-char-table-parent table char-width-table)
    (setq char-width-table table)))

(set-east-asian-ambiguous-width 2)
#+end_src
** Font
English and Japanese fonts.

#+begin_src emacs-lisp
(let* ((en-font "Hack")
       (jp-font "Migu 1M")
       (size 12)
       (fontset (format "fontset-%s" en-font)))
  (create-fontset-from-ascii-font
   (format "%s-%d:weight=normal" en-font size) nil en-font)
  (set-fontset-font fontset 'unicode jp-font nil 'append)
  (add-to-list 'default-frame-alist `(font . ,fontset))
  (add-to-list 'face-font-rescale-alist `(,(format ".*%s.*" jp-font) . 1.1)))
#+end_src
** Window Arrangement
*** Mode Line
Display line number and column number in the mode line.

#+begin_src emacs-lisp
(line-number-mode 1)
(setq line-number-display-limit-width 10000)

(column-number-mode 1)
#+end_src

Display the date and time in the mode line.

#+begin_src emacs-lisp
(setq system-time-locale "C")
(setq display-time-format "%a %m/%d %H:%M")

(display-time-mode 1)
#+end_src
*** Theme
Zerodark Emacs theme.

#+begin_src emacs-lisp
(use-package zerodark-theme :ensure t :defer t
  :init
  (load-theme 'zerodark t)
  :config
  (zerodark-setup-modeline-format))
#+end_src
*** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons :ensure t :defer t)
#+end_src
*** neotree
#+begin_src emacs-lisp
(use-package neotree :ensure t :after all-the-icons
  :bind
  ("C-x t" . neotree-toggle)
  :config
  (setq neo-theme
        (if (display-graphic-p)
            'icons
          'arrow)))
#+end_src
*** nlinum
#+begin_src emacs-lisp
(use-package nlinum :ensure t
  :hook (prog-mode . nlinum-mode)
  :config
  (setq nlinum-format "%4d "
        nlinum-highlight-current-line t))
#+end_src
** Moving Around
*** Smooth Scroll
#+begin_src emacs-lisp
(setq auto-window-vscroll nil
      scroll-step 0
      scroll-margin 5
      scroll-conservatively most-positive-fixnum
      scroll-up-aggressively nil
      scroll-down-aggressively nil
      scroll-preserve-screen-position 'always)
#+end_src
*** avy
#+begin_src emacs-lisp
(use-package avy :ensure t
  :bind
  ("C-'" . avy-goto-subword-1)
  ("M-g g" . avy-goto-line))
#+end_src
*** avy-migemo
#+begin_src emacs-lisp
(use-package avy-migemo :ensure t :after migemo
  :commands avy-migemo-mode
  :config
  (avy-migemo-mode 1)
  (use-package avy-migemo-e.g.ivy :after ivy)
  (use-package avy-migemo-e.g.swiper :after swiper)
  (use-package avy-migemo-e.g.counsel :after counsel
    :bind
    ("C-x j" . counsel-rg-migemo)))
#+end_src
*** beacon
#+begin_src emacs-lisp
(use-package beacon :ensure t
  :commands beacon-mode
  :init
  (beacon-mode 1)
  :config
  (setq beacon-push-mark 35))
#+end_src
*** eyebrowse
#+begin_src emacs-lisp
(use-package eyebrowse :ensure t :defer t
  :config
  (eyebrowse-mode 1))
#+end_src
*** win-switch
#+begin_src emacs-lisp
(use-package win-switch :ensure t
  :bind
  ("C-x o" . win-switch-dispatch)
  :config
  (setq win-switch-window-threshold 1
        win-switch-idle-time 1.2
        win-switch-provide-visual-feedback nil
        win-switch-other-window-first  t)
  (win-switch-set-keys '("h") 'left)
  (win-switch-set-keys '("j") 'down)
  (win-switch-set-keys '("k") 'up)
  (win-switch-set-keys '("l") 'right)
  (win-switch-set-keys '("o") 'next-window)
  (win-switch-set-keys '("p") 'previous-window)
  (win-switch-set-keys '("H") 'shrink-horizontally)
  (win-switch-set-keys '("J") 'shrink-vertically)
  (win-switch-set-keys '("K") 'enlarge-vertically)
  (win-switch-set-keys '("L") 'enlarge-horizontally)
  (win-switch-set-keys '("2") 'split-vertically)
  (win-switch-set-keys '("3") 'split-horizontally)
  (win-switch-set-keys '("q") 'exit))
#+end_src
** Text Arrangement
*** Whitespace
#+begin_src emacs-lisp
(require 'whitespace)
(add-hook 'before-save-hook #'delete-trailing-whitespace)

(setq whitespace-line-column 80)
(setq whitespace-style '(face trailing tabs spaces space-mark tab-mark))
(setq whitespace-space-regexp "\\(\u3000+\\)"
      whitespace-display-mappings '((space-mark ?\u3000 [?\u25a1] [?_ ?_])
                                    (tab-mark ?\t [?\u00bb ?\t] [?\\ ?\t])))
(set-face-attribute 'whitespace-trailing nil
                    :foreground "pale green"
                    :background 'unspecified
                    :underline t)
(set-face-attribute 'whitespace-tab nil
                    :foreground "sky blue"
                    :background 'unspecified
                    :underline t)
(set-face-attribute 'whitespace-space nil
                    :foreground "tomato"
                    :background 'unspecified
                    :underline nil)

(global-whitespace-mode 1)
#+end_src
** Text Manipulation
*** Delete Word
Don't kill. Delete!

#+begin_src emacs-lisp
(defun hyonhyoro|delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With ARG, do this that many times."
  (interactive "p")
  (if (use-region-p)
      (delete-region (region-beginning) (region-end))
    (delete-region (point)
                   (progn
                     (forward-word arg)
                     (point)))))

(defun hyonhyoro|backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
With ARG, do this that many times."
  (interactive "p")
  (hyonhyoro|delete-word (- arg)))

(global-set-key (kbd "M-d") #'hyonhyoro|delete-word)
(global-set-key (kbd "M-h") #'hyonhyoro|backward-delete-word)
#+end_src

Overwrite the selected region.

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src
*** Open Line
Add two commands like vi's =o= and =O=.

#+begin_src emacs-lisp
(defun hyonhyoro|open-next-line (arg)
  "Move to the next line and then open a new one.
See also `newline-and-indent'."
  (interactive "p")
  (end-of-line)
  (open-line arg)
  (forward-line 1)
  (indent-according-to-mode))

(defun hyonhyoro|open-previous-line (arg)
  "Open a new line before the current one.
See also `newline-and-indent'."
  (interactive "p")
  (beginning-of-line)
  (open-line arg)
  (indent-according-to-mode))

(global-set-key (kbd "C-o") #'hyonhyoro|open-next-line)
(global-set-key (kbd "M-o") #'hyonhyoro|open-previous-line)
#+end_src
*** aggressive-indent
#+begin_src emacs-lisp
(use-package aggressive-indent :ensure t
  :hook (emacs-lisp-mode . aggressive-indent-mode))
#+end_src
*** anzu
#+begin_src emacs-lisp
(use-package anzu :ensure t
  :bind
  (("M-q" . anzu-query-replace)
   ("M-Q" . anzu-query-replace-regexp))
  :config
  (global-anzu-mode 1)
  (setq anzu-deactivate-region t
        anzu-search-threshold 1000)
  (setq anzu-use-migemo t))
#+end_src
*** comment-dwim-2
#+begin_src emacs-lisp
(use-package comment-dwim-2 :ensure t
  :bind
  ("M-;" . comment-dwim-2))
#+end_src
*** cua-mode
Start CUA rectangle mode by =C-x SPC=.

#+begin_src emacs-lisp
(cua-mode 1)

(setq cua-enable-cua-keys nil)

(let ((map cua-global-keymap))
  (define-key map (kbd "C-x SPC") #'cua-set-rectangle-mark)
  (define-key map (kbd "C-<return>") nil))
#+end_src
*** expand-region
#+begin_src emacs-lisp
(use-package expand-region :ensure t
  :bind
  ("C-;" . er/expand-region))
#+end_src
*** move-text
#+begin_src emacs-lisp
(use-package move-text :ensure t
  :bind
  (("M-n" . move-text-down)
   ("M-p" . move-text-up)))
#+end_src
*** multiple-cursors
#+begin_src emacs-lisp
(use-package multiple-cursors :ensure t :after hydra
  :bind
  ("C-t" . hyonhyoro|hydra-multiple-cursors/body)
  :config
  (defhydra hyonhyoro|hydra-multiple-cursors (:hint nil)
    "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
    ("n" mc/mark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("N" mc/skip-to-next-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("r" mc/mark-all-in-region-regexp :exit t)
    ("q" nil)))
#+end_src
*** smartparens
Use =sp-pair= for global pair properties and =sp-local-pair= for local ones.
Read [[https://github.com/Fuco1/smartparens/wiki/Pair-management][Pair management]] and [[https://github.com/Fuco1/smartparens/wiki/Permissions][Premissions]] for details on adding pair rules.

#+begin_src emacs-lisp
(use-package smartparens :ensure t
  :commands sp-local-pair
  :hook (((emacs-lisp-mode org-mode c-mode c++-mode) . smartparens-mode)
         ((emacs-lisp-mode org-mode c-mode c++-mode) . show-smartparens-mode))
  :bind
  (:map smartparens-mode-map
        ("C-M-f" . sp-forward-sexp)
        ("C-M-b" . sp-backward-sexp)
        ("C-M-d" . sp-down-sexp)
        ("C-M-a" . sp-backward-down-sexp)
        ("C-M-u" . sp-backward-up-sexp)
        ("C-M-e" . sp-up-sexp)
        ("C-S-d" . sp-beginning-of-sexp)
        ("C-S-a" . sp-end-of-sexp)
        ("C-M-n" . sp-next-sexp)
        ("C-M-p" . sp-previous-sexp)
        ("M-F" . sp-forward-symbol)
        ("M-B" . sp-backward-symbol)
        ("C-M-k" . sp-kill-sexp)
        ("M-k" . sp-backward-kill-sexp)
        ("C-k" . sp-kill-hybrid-sexp)
        ("C-M-w" . sp-copy-sexp)
        ("C-<right>" . sp-forward-slurp-sexp)
        ("C-<left>" . sp-forward-barf-sexp)
        ("C-M-<left>" . sp-backward-slurp-sexp)
        ("C-M-<right>" . sp-backward-barf-sexp)
        ("M-s" . sp-splice-sexp)
        ("C-M-<delete>" . sp-splice-sexp-killing-forward)
        ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
        ("C-S-<backspace>" . sp-splice-sexp-killing-around)
        ("C-M-t" . sp-transpose-sexp)
        ("C-x C-t" . sp-transpose-hybrid-sexp)
        ("C-M-SPC" . sp-mark-sexp))
  :config
  (require 'smartparens-config)
  (electric-pair-mode -1)
  (show-paren-mode -1)
  (sp-with-modes '(c-mode c++-mode)
    (sp-local-pair "{" nil
                   :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/"
                   :post-handlers '(("| " "SPC")
                                    ("* |[i]\n[i]" "RET")))))
#+end_src
*** undo-tree
#+begin_src emacs-lisp
(use-package undo-tree :ensure t
  :commands global-undo-tree-mode
  :init
  (global-undo-tree-mode 1))
#+end_src
*** wgrep
#+begin_src emacs-lisp
(use-package wgrep :ensure t :defer t)
#+end_src
*** zop-to-char
#+begin_src emacs-lisp
(use-package zop-to-char :ensure t
  :bind
  ("M-z" . zop-up-to-char))
#+end_src
** Framework
*** hydra
#+begin_src emacs-lisp
(use-package hydra :ensure t
  :commands (hydra-default-pre
             hydra-keyboard-quit
             hydra--call-interactively-remap-maybe
             hydra-show-hint
             hydra-set-transient-map))
#+end_src
*** ivy
#+begin_src emacs-lisp
(use-package ivy :ensure t :after flx
  :commands (ivy-mode
             ivy--format-function-generic
             ivy--add-face)
  :init
  (ivy-mode 1)
  :bind
  (("M-r" . ivy-resume)
   ("C-M-r" . ivy-resume)
   :map ivy-mode-map
   ("C-c C-e" . ivy-wgrep-change-to-wgrep-mode))
  :config
  (setq ivy-height 8
        ivy-count-format "(%d/%d) "
        ivy-use-virtual-buffers nil)
  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (swiper-all . ivy--regex-plus)
          (counsel-find-file . ivy--regex-plus)
          (t . ivy--regex-fuzzy)))
  (defun hyonhyoro|ivy-format-function-arrow (cands)
    "Transform CANDS into a string for minibuffer."
    (ivy--format-function-generic
     (lambda (str)
       (concat "-> " (ivy--add-face str 'ivy-current-match)))
     (lambda (str)
       (concat "   " str))
     cands
     "\n"))
  (setq ivy-format-function #'hyonhyoro|ivy-format-function-arrow))
#+end_src
** Completion
*** flx
Fuzzy matching engine. You should decrease frequency of garbage collection
to speed up future matching. The author encourages you to keep =gc-cons-threshold=
20000000 or over.

#+begin_src emacs-lisp
(use-package flx :ensure t)
#+end_src
*** swiper
#+begin_src emacs-lisp
(use-package swiper :ensure t :after ivy
  :bind
  (("C-M-s" . swiper-all)
   :map swiper-map
   ("M-q" . swiper-query-replace)
   ("C-'" . swiper-avy)
   ("C-t" . swiper-mc)))
#+end_src
*** counsel
#+begin_src emacs-lisp
(use-package counsel :ensure t :after ivy
  :init
  (setq enable-recursive-minibuffers t)
  :bind
  (("C-s" . counsel-grep-or-swiper)
   ("C-x C-f" . counsel-find-file)
   ("C-x C-b" . counsel-imenu)
   ("C-x C-r" . counsel-recentf)
   ("M-x" . counsel-M-x)
   ("M-y" . counsel-yank-pop)
   ("C-c g f" . counsel-git)
   ("C-c g j" . counsel-git-grep)
   :map help-map
   ("b" . counsel-descbinds)
   ("f" . counsel-describe-function)
   ("v" . counsel-describe-variable)
   ("l" . counsel-find-library)
   ("i" . counsel-info-lookup-symbol)
   ("u" . counsel-unicode-char)
   :map read-expression-map
   ("C-r" . counsel-minibuffer-history)
   :map minibuffer-local-shell-command-map
   ("C-r" . counsel-minibuffer-history))
  :config
  (setq counsel-find-file-at-point t))
#+end_src
*** company
#+begin_src emacs-lisp
(use-package company :ensure t
  :hook (emacs-lisp-mode . company-mode)
  :bind
  (:map company-active-map
   ("C-s" . company-filter-candidates)
   ("C-n" . company-select-next)
   ("C-p" . company-select-previous)
   ("M-n" . nil)
   ("M-p" . nil)
   ("C-h" . nil)
   :map company-search-map
   ("C-n" . company-select-next)
   ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0
        company-minimum-prefix-length 4
        company-selection-wrap-around t
        company-tooltip-limit 7
        company-tooltip-minimum 5
        company-tooltip-align-annotations t
        company-tooltip-flip-when-above t)
  (setq company-frontends '(company-pseudo-tooltip-unless-just-one-frontend-with-delay
                            company-preview-common-frontend
                            company-echo-metadata-frontend))
  (setq company-transformers '(company-sort-by-backend-importance
                               company-sort-by-occurrence)))
#+end_src
*** migemo
#+begin_src emacs-lisp
(use-package migemo :ensure t
  :if (executable-find "cmigemo")
  :commands migemo-init
  :config
  (setq migemo-command "cmigemo"
        migemo-options '("-q" "--emacs")
        migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict"
        migemo-coding-system 'utf-8
        migemo-user-dictionary nil
        migemo-regex-dictionary nil)
  (migemo-init))
#+end_src
** Checker
*** ispell
#+begin_src emacs-lisp
(use-package ispell :defer t
  :if (executable-find "aspell")
  :config
  (setq ispell-dictionary "english"
        ispell-program-name "aspell")
  (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
#+end_src
*** flyspell
Fix the conflict with =er/expand-region=.

#+begin_src emacs-lisp
(use-package flyspell
  :hook (org-mode . flyspell-mode)
  :bind
  (:map flyspell-mode-map
        ("C-;" . nil)))
#+end_src
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck :ensure t :after hydra
  :commands (flycheck-list-errors
             flycheck-next-error
             flycheck-previous-error
             flycheck-first-error
             flycheck-error-list-set-filter)
  :bind
  (:map flycheck-mode-map
        ("C-c f" . hyonhyoro|hydra-flycheck/body))
  :config
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (side . bottom)
                 (reusable-frames . visible)
                 (window-height . 0.2)))
  (defhydra hyonhyoro|hydra-flycheck
    (:pre
     (progn (setq hydra-lv t) (flycheck-list-errors))
     :post
     (progn (setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
     :hint nil)
    "
   ^Up^       ^Down^      ^Other^
------------------------------
[_p_] Next  [_n_] Next  [_f_] Filter
[_P_] End   [_N_] End   [_q_] Quit
"
    ("n" flycheck-next-error)
    ("p" flycheck-previous-error)
    ("N" (progn (goto-char (point-max)) (flycheck-previous-error)))
    ("P" flycheck-first-error)
    ("f" flycheck-error-list-set-filter)
    ("q" nil)))
#+end_src
** Dired
*** dired
#+begin_src emacs-lisp
(use-package dired
  :bind
  (:map dired-mode-map
        ("r" . wdired-change-to-wdired-mode))
  :config
  (require 'dired-x)
  (setq dired-auto-revert-buffer t)
  (put 'dired-find-alternate-file 'disabled nil)
  (setq dired-dwim-target t)
  (setq dired-recursive-copies 'always
        dired-recursive-deletes 'top)
  (setq dired-listing-switches
        "-AFGhl --group-directories-first --time-style=long-iso")
  (require 'dired-aux)
  (require 'dired-async)
  (setq dired-compress-file-suffixes
        '(("\\.tar\\.bz2\\'" "" "tar xjf %i")
          ("\\.tar\\.gz\\'"  "" "tar xzf %i")
          ("\\.bz2\\'"       "" "bunzip2 %i")
          ("\\.gz\\'"        "" "gunzip %i")
          ("\\.xz\\'"        "" "unxz %i")
          ("\\.tar\\'"       "" "tar xf %i")
          ("\\.tbz2\\'"      "" "tar xjf %i")
          ("\\.tgz\\'"       "" "tar xzf %i")
          ("\\.zip\\'"       "" "unzip %i")
          ("\\.rar\\'"       "" "unrar x %i")
          ("\\.Z\\'"         "" "uncompress %i")
          ("\\.7z\\'"        "" "7z x %i"))))
#+end_src
*** dired-collapse
#+begin_src emacs-lisp
(use-package dired-collapse :ensure t :after dired
  :bind
  (:map dired-mode-map
        ("K" . dired-collapse-mode)))
#+end_src
*** dired-filter
#+begin_src emacs-lisp
(use-package dired-filter :ensure t :after dired)
#+end_src
*** dired-k
#+begin_src emacs-lisp
(use-package dired-k :ensure t :after dired
  :init
  (add-hook 'dired-initial-position-hook #'dired-k)
  (add-hook 'dired-after-readin-hook #'dired-k-no-revert)
  :bind
  (:map dired-mode-map
        ("g" . dired-k))
  :config
  (setq dired-k-human-readable t))
#+end_src
*** dired-narrow
#+begin_src emacs-lisp
(use-package dired-narrow :ensure t :after dired
  :bind
  (:map dired-mode-map
        ("C-s" . dired-narrow)))
#+end_src
*** dired-subtree
#+begin_src emacs-lisp
(use-package dired-subtree :ensure t :after dired
  :bind
  (:map dired-mode-map
        ("i" . dired-subtree-insert)
        (";" . dired-subtree-remove)))
#+end_src
** Git
*** magit
#+begin_src emacs-lisp
(use-package magit :ensure t :after ivy
  :bind
  (("C-c g s" . magit-status)
   ("C-c g b" . magit-blame))
  :config
  (setq magit-auto-revert-mode nil
        magit-diff-refine-hunk 'all)
  (setq magit-completing-read-function 'ivy-completing-read))
#+end_src
*** git-gutter-fringe+
#+begin_src emacs-lisp
(use-package git-gutter-fringe+ :ensure t
  :if (display-graphic-p)
  :bind
  (("C-c g g" . git-gutter+-mode)
   :map git-gutter+-mode-map
   ("C-c g d" . git-gutter+-show-hunk-inline-at-point)))
#+end_src
*** gitconfig-mode
#+begin_src emacs-lisp
(use-package gitconfig-mode :ensure t :defer t)
#+end_src
*** gitignore-mode
#+begin_src emacs-lisp
(use-package gitignore-mode :ensure t :defer t)
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c k") #'checkdoc-minor-mode)
#+end_src
** Org
*** org-mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)\\'" . org-mode))

(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c b") #'org-switchb)
(global-set-key (kbd "C-c c") #'org-capture)

(setq org-directory "~/org"
      org-default-notes-file (expand-file-name "refile.org" org-directory)
      org-startup-folded t
      org-startup-indented t
      org-startup-truncated t
      org-ellipsis "⤸"
      org-cycle-separator-lines 0
      org-blank-before-new-entry '((heading)
                                   (plain-list-item . auto))
      org-return-follows-link t)
#+end_src

Org-TODO.

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "❢ TODO(t)" "☛ NEXT(n)" "|" "✔ DONE(d)")
                          (sequence "⚑ WAITING(w@/!)" "┅ INACTIVE(i@/!)" "|" "✘ CANCELED(c@/!)"))
      org-use-fast-todo-selection t
      org-treat-S-cursor-todo-selection-as-state-change nil
      org-enable-priority-commands nil)
#+end_src

Org-list.

#+begin_src emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-")
                                      ("*" . "-")
                                      ("1." . "-")
                                      ("1)" . "a)")))
#+end_src

Org-agenda.

#+begin_src emacs-lisp
(setq org-agenda-files `(,org-directory))
#+end_src

Org-archive.

#+begin_src emacs-lisp
(setq org-archive-mark-done nil
      org-archive-location "%s_archive::* Archived Tasks")
#+end_src

Org-babel.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src
*** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets :ensure t
  :hook (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list '("✸" "✦" "➤" "✴")))
#+end_src
* Footer
# Local Variables:
# coding: utf-8
# indent-tabs-mode: nil
# time-stamp-pattern: "10/MODIFIED:\\\\?[ \t]+%:y-%02m-%02d\\\\?\n"
# End:
