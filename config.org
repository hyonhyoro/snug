#+TITLE:    Emacs Configuration
#+AUTHOR:   Kazuho Sakoda
#+EMAIL:    hyonhyoro.kazuho@gmail.com
#+DATE:     2016-09-21
#+MODIFIED: 2018-05-12
#+STARTUP:  overview


* Configuration
** StartUp
Keep your =~/.emacs.d= clean.

#+begin_src emacs-lisp
(when load-file-name
  (setq user-emacs-directory (file-name-directory load-file-name)))
#+end_src

Read [[https://github.com/lewang/flx#gc-optimization][flx]].

#+begin_src emacs-lisp
(setq gc-cons-threshold 20000000)
#+end_src

Stop annoying things.

#+begin_src emacs-lisp
(when (display-graphic-p)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (tooltip-mode -1))

(setq initial-scratch-message nil
      initial-major-mode #'fundamental-mode
      inhibit-startup-screen t)

(blink-cursor-mode -1)

(defalias #'yes-or-no-p #'y-or-n-p)
#+end_src

Switch some keys by using [[https://ja.osdn.net/projects/yamy/][yamy]] to avoid "Emacs Pinky".

| Before   | After          |
|----------+----------------|
| CapsLock | Ctrl_L         |
| Enter    | Ctrl_R(Enter)  |
| Shift_L  | Alt_L          |
| Shift_R  | Alt_R          |
| Space    | Shift_L(Space) |

#+begin_src emacs-lisp
(keyboard-translate ?\C-h ?\C-?)
(keyboard-translate ?\C-z ?\C-h)
#+end_src
** Package Management
Add emacs-lisp package repositories.

#+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")))
(package-initialize)
#+end_src

Read [[https://github.com/jwiegley/use-package][use-package]].

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'bind-key)
#+end_src
** File Management
*** Cache File
Store all temporary files in =cache= directory.

#+begin_src emacs-lisp
(defconst hyonhyoro|cache-dir
  (expand-file-name "cache/" user-emacs-directory))

(unless (file-exists-p hyonhyoro|cache-dir)
  (make-directory hyonhyoro|cache-dir))
#+end_src

Custom file.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" hyonhyoro|cache-dir))
#+end_src

Backup files. Create =*~= files in =cache/backup= directory.

#+begin_src emacs-lisp :tangle no
(setq make-backup-files t)
#+end_src

#+begin_src emacs-lisp :tangle no
(setq version-control t)
(setq kept-new-vi 5
      kept-old-versions 0)
(setq backup-by-copying nil)
(setq delete-old-versions t)
#+end_src

#+begin_src emacs-lisp
(let ((backup-dir (expand-file-name "backup/" hyonhyoro|cache-dir)))
  (setq backup-directory-alist `((".*" . ,backup-dir))))
#+end_src

Auto-save files. Create =#*#= files in =cache/auto-save= directory.

#+begin_src emacs-lisp
(setq auto-save-default t)
(setq delete-auto-save-files t)
(setq auto-save-interval 150
      auto-save-timeout 15)

(let ((auto-save-dir (expand-file-name "auto-save/" hyonhyoro|cache-dir)))
  (setq auto-save-list-file-prefix (format ".saves-%s" auto-save-dir))
  (setq auto-save-file-name-transforms
        `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t)
          (".*" ,auto-save-dir t))))
#+end_src

Lock files. Stop creating =.#*= files.

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src
*** Executable File
Store all executable files in =bin= directory.

#+begin_src emacs-lisp
(defconst hyonhyoro|bin-dir
  (expand-file-name "bin/" user-emacs-directory))

(unless (file-exists-p hyonhyoro|bin-dir)
  (make-directory hyonhyoro|bin-dir))
#+end_src
*** Save
#+begin_src emacs-lisp
(add-hook 'before-save-hook #'time-stamp)
#+end_src

#+begin_src emacs-lisp
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src

#+begin_src emacs-lisp
(setq-default require-final-newline t)
#+end_src
** Locale
#+begin_src emacs-lisp
(set-locale-environment nil)
(set-language-environment "Japanese")

(let ((coding-system 'utf-8))
  (setq locale-coding-system coding-system)
  (prefer-coding-system coding-system)
  (set-file-name-coding-system coding-system)
  (set-keyboard-coding-system coding-system)
  (set-terminal-coding-system coding-system)
  (set-selection-coding-system coding-system))
#+end_src

East Asian ambiguous width.

#+begin_src emacs-lisp
(defun set-east-asian-ambiguous-width (width)
  "Integrate some glyphs' width into WIDTH."
  (while (char-table-parent char-width-table)
    (setq char-width-table (char-table-parent char-width-table)))
  (let ((table (make-char-table nil)))
    (dolist (range
             '(#x00A1 #x00A4 (#x00A7 . #x00A8) #x00AA (#x00AD . #x00AE)
                      (#x00B0 . #x00B4) (#x00B6 . #x00BA) (#x00BC . #x00BF)
                      #x00C6 #x00D0 (#x00D7 . #x00D8) (#x00DE . #x00E1) #x00E6
                      (#x00E8 . #x00EA) (#x00EC . #x00ED) #x00F0
                      (#x00F2 . #x00F3) (#x00F7 . #x00FA) #x00FC #x00FE
                      #x0101 #x0111 #x0113 #x011B (#x0126 . #x0127) #x012B
                      (#x0131 . #x0133) #x0138 (#x013F . #x0142) #x0144
                      (#x0148 . #x014B) #x014D (#x0152 . #x0153)
                      (#x0166 . #x0167) #x016B #x01CE #x01D0 #x01D2 #x01D4
                      #x01D6 #x01D8 #x01DA #x01DC #x0251 #x0261 #x02C4 #x02C7
                      (#x02C9 . #x02CB) #x02CD #x02D0 (#x02D8 . #x02DB) #x02DD
                      #x02DF (#x0300 . #x036F) (#x0391 . #x03A9)
                      (#x03B1 . #x03C1) (#x03C3 . #x03C9) #x0401
                      (#x0410 . #x044F) #x0451 #x2010 (#x2013 . #x2016)
                      (#x2018 . #x2019) (#x201C . #x201D) (#x2020 . #x2022)
                      (#x2024 . #x2027) #x2030 (#x2032 . #x2033) #x2035 #x203B
                      #x203E #x2074 #x207F (#x2081 . #x2084) #x20AC #x2103
                      #x2105 #x2109 #x2113 #x2116 (#x2121 . #x2122) #x2126
                      #x212B (#x2153 . #x2154) (#x215B . #x215E)
                      (#x2160 . #x216B) (#x2170 . #x2179) (#x2190 . #x2199)
                      (#x21B8 . #x21B9) #x21D2 #x21D4 #x21E7 #x2200
                      (#x2202 . #x2203) (#x2207 . #x2208) #x220B #x220F #x2211
                      #x2215 #x221A (#x221D . #x2220) #x2223 #x2225
                      (#x2227 . #x222C) #x222E (#x2234 . #x2237)
                      (#x223C . #x223D) #x2248 #x224C #x2252 (#x2260 . #x2261)
                      (#x2264 . #x2267) (#x226A . #x226B) (#x226E . #x226F)
                      (#x2282 . #x2283) (#x2286 . #x2287) #x2295 #x2299 #x22A5
                      #x22BF #x2312 (#x2460 . #x24E9) (#x24EB . #x254B)
                      (#x2550 . #x2573) (#x2580 . #x258F) (#x2592 . #x2595)
                      (#x25A0 . #x25A1) (#x25A3 . #x25A9) (#x25B2 . #x25B3)
                      (#x25B6 . #x25B7) (#x25BC . #x25BD) (#x25C0 . #x25C1)
                      (#x25C6 . #x25C8) #x25CB (#x25CE . #x25D1)
                      (#x25E2 . #x25E5) #x25EF (#x2605 . #x2606) #x2609
                      (#x260E . #x260F) (#x2614 . #x2615) #x261C #x261E #x2640
                      #x2642 (#x2660 . #x2661) (#x2663 . #x2665)
                      (#x2667 . #x266A) (#x266C . #x266D) #x266F #x273D
                      (#x2776 . #x277F) (#xE000 . #xF8FF) (#xFE00 . #xFE0F)
                      #xFFFD))
      (set-char-table-range table range width))
    (optimize-char-table table)
    (set-char-table-parent table char-width-table)
    (setq char-width-table table)))

(set-east-asian-ambiguous-width 2)
#+end_src
** Font
English font.

#+begin_src emacs-lisp
(let ((en-font-spec (font-spec :family "Hack" :size 16)))
  (set-fontset-font nil 'ascii en-font-spec))
#+end_src

Japanese font.

#+begin_src emacs-lisp
(let ((jp-font-spec (font-spec :family "Migu 1M")))
  (set-fontset-font nil 'japanese-jisx0213.2004-1 jp-font-spec)
  (set-fontset-font nil 'japanese-jisx0213-2 jp-font-spec)
  (set-fontset-font nil 'katakana-jisx0201 jp-font-spec))

(add-to-list 'face-font-rescale-alist '(".*Migu 1M.*" . 1.1))
#+end_src

#+begin_src emacs-lisp
(set-charset-priority 'ascii 'japanese-jisx0213.2004-1 'japanese-jisx0213-2
                      'latin-jisx0201 'katakana-jisx0201 'iso-8859-1 'cp1252 'unicode)
#+end_src
** Moving Around
*** Smooth Scroll
#+begin_src emacs-lisp
(setq auto-window-vscroll nil
      scroll-step 0
      scroll-margin 5
      scroll-conservatively most-positive-fixnum
      scroll-up-aggressively nil
      scroll-down-aggressively nil
      scroll-preserve-screen-position 'always)
#+end_src
** Text Manipulation
*** Delete Word
Don't kill. Delete!

#+begin_src emacs-lisp
(defun hyonhyoro|delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With ARG, do this that many times."
  (interactive "p")
  (if (use-region-p)
      (delete-region (region-beginning) (region-end))
    (delete-region (point)
                   (progn
                     (forward-word arg)
                     (point)))))

(defun hyonhyoro|backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
WITH ARG, do this that many times."
  (interactive "p")
  (hyonhyoro|delete-word (- arg)))

(global-set-key (kbd "M-d") #'hyonhyoro|delete-word)
(global-set-key (kbd "M-h") #'hyonhyoro|backward-delete-word)
#+end_src
*** Open Line
Add two commands lie vi's =o= and =O=.

#+begin_src emacs-lisp
(defun hyonhyoro|open-next-line (arg)
  "Move to the next line and then open a new one.
See also `newline-and-indent'."
  (interactive "p")
  (end-of-line)
  (open-line arg)
  (forward-line 1)
  (indent-according-to-mode))

(defun hyonhyoro|open-previous-line (arg)
  "Open a new line before the current one.
See also `newline-and-indent'."
  (interactive "p")
  (beginning-of-line)
  (open-line arg)
  (indent-according-to-mode))

(global-set-key (kbd "C-o") #'hyonhyoro|open-next-line)
(global-set-key (kbd "M-o") #'hyonhyoro|open-previous-line)
#+end_src
*** cua-mode
Start CUA rectangle mode by =C-x SPC=.

#+begin_src emacs-lisp
(cua-mode 1)

(setq cua-enable-cua-keys nil)

(let ((map cua-global-keymap))
  (define-key map (kbd "C-x SPC") #'cua-set-rectangle-mark)
  (define-key map (kbd "<C-return>") nil))
#+end_src
** Checker
*** ispell
#+begin_src emacs-lisp
(use-package ispell :defer t
  :if (executable-find "aspell")
  :config
  (setq ispell-dictionary "english"
        ispell-program-name "aspell")
  (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c k") #'checkdoc-minor-mode)
#+end_src
** Org
*** org-mode
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)\\'" . org-mode))

(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c b") #'org-switchb)
(global-set-key (kbd "C-c c") #'org-capture)

(setq org-directory "~/org"
      org-default-notes-file (expand-file-name "refile.org" org-directory)
      org-startup-folded t
      org-startup-indented t
      org-startup-truncated t
      org-ellipsis "⤸"
      org-cycle-separator-lines 0
      org-blank-before-new-entry '((heading)
                                   (plain-list-item . auto))
      org-return-follows-link t)
#+end_src

Org-TODO.

#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "❢ TODO(t)" "☛ NEXT(n)" "|" "✔ DONE(d)")
                          (sequence "⚑ WAITING(w@/!)" "┅ INACTIVE(i@/!)" "|" "✘ CANCELED(c@/!)"))
      org-use-fast-todo-selection t
      org-treat-S-cursor-todo-selection-as-state-change nil
      org-enable-priority-commands nil)
#+end_src

Org-list.

#+begin_src emacs-lisp
(setq org-list-demote-modify-bullet '(("+" . "-")
                                      ("*" . "-")
                                      ("1." . "-")
                                      ("1)" . "a)")))
#+end_src

Org-agenda.

#+begin_src emacs-lisp
(setq org-agenda-files `(,org-directory))
#+end_src

Org-archive.

#+begin_src emacs-lisp
(setq org-archive-mark-done nil
      org-archive-location "%s_archive::* Archived Tasks")
#+end_src

Org-babel.

#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)
#+end_src
* Footer
# Local Variables:
# coding: utf-8
# indent-tabs-mode: nil
# time-stamp-pattern: "10/MODIFIED:\\\\?[ \t]+%:y-%02m-%02d\\\\?\n"
# End:
